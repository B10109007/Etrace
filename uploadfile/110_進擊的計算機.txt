#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>


/*
* 學號：494210025
* 姓名：姜永慶 
* 系別：數學二A 
* 程式名稱 ：簡易計算機
* 程式執行參數說明： 見程式碼註解 
* 程式功能描述：具有加減乘除的功能 使用堆疊來實現 要有先乘除後加減的判斷


* 範例輸入與輸出：
  CALCULATOR
  input infix equation : 
  5+6*3     
  input infix equation : 
  563*+     
  the postifix of this equation is :
  23   
*/

/*心得 
之前本來想用link-listed來做的，可是因為實在不熟，寫起來太麻煩所以就改用陣列 
在想整個主體架構時花了好多時間還是想不通該如何實做，直到上網借鑒前人所寫的程式時
才瞭解具體的實做方法 ，只是還是來不及做出個位數以上和浮點數的運算 
 */

int postfix(char*); // 中序轉後序 
int priority(char); // 決定運算子優先順序 

void evalPf(char* ); //後序的處理 
double cal(double, char, double);//運算 


int main(int argc, char *argv[])
{
  
  char input[80];
  printf("CALCULATOR\n"); 
  printf("input infix equation : \n");
  gets(input);
  
  printf("the postifix of this equation is :\n");
  postfix(input); 

   
  system("PAUSE");	
  return 0;
}
int postfix(char* infix) 
{ 
    int i = 0, j=0,top = 0; 
    char stack[80] = {'\0'}; //運算子堆疊陣列 
    char op; 
    char output[80];//後序陣列 
    while(1) 
    { 
        op = infix[i]; 

        switch(op) 
        { 
            case '\0': //輸出剩餘的運算子 
                while(top > 0) 
                { 
                    printf("%c", stack[top]); 
                    output[j]=stack[top];
                    top--;  
                    j++;
                    output[j]='\0';
                } 

                evalPf(output);
                return 0; 
            
            case '(': //遇到左括號就存到堆疊 
                if(top < (sizeof(stack) / sizeof(char))) 
                { 
                    top++; 
                    stack[top] = op; 
                
                } 
                break; 
            case '+': case '-': case '*': case '/': 
                while(priority(stack[top]) >= priority(op))//比較優先權 
                {                                          //當堆疊內top處運算子                                                                                                                                                                        
                    printf("%c", stack[top]);              //優先時，就取出
                    output[j]=stack[top];                  //當前堆疊元素
                    j++;
                    top--; 
                } 
                
                if(top < (sizeof(stack) / sizeof(char)))// 存入堆疊 
                { 
                    top++; 
                    stack[top] = op;
                 
                } 
                break; 
            // 遇 ) 輸出至 ( 
            case ')': 
                while(stack[top] != '(') 
                { 
                    printf("%c", stack[top]); 
                    output[j]=stack[top];
                    j++;
                    top--; 
                } 
                top--;  // 不輸出( 
                break; 
            // 運算元直接輸出 
            default: 
                if (isdigit(infix[i-1])==0 && i!=0 && infix[i-1]!='.')
                {
                printf(" ");
                output[j]=' ';
                j++;
                }
                printf("%c", op); 
                output[j]=op;
                j++;
                break; 
        } 
        i++; 
    }
    
} 
//優先權比較函式 
int priority(char op) { 
    int p; 

    switch(op) { 
       case '+': case '-': 
            p = 1; 
            break; 
        case '*': case '/': 
            p = 2; 
            break; 
        default: 
            p = 0; 
            break; 
    } 

    return p; 
} 
 
void evalPf(char* postfix) 
{ 
    double stack[80] = {0.0}; 
    char temp[2]; 
    char token; 
    int top = 0, i = 0; 

    temp[1] = '\0'; 

    while(1) 
    { 
        token = postfix[i]; 
        switch(token) 
        { 
            case '\0': 
                printf("\nthe answer of this equation is :\n%f\n", stack[top]); 
                return; 
            case '+': case '-': case '*': case '/': 
                stack[top-1] = 
                       cal(stack[top-1], token, stack[top]); 
                top--; 
                break; 
            default: 
                if(top < sizeof(stack) / sizeof(float)) 
                { 
                    if (postfix[i]==' ')
                    i++;
     
                    

                    temp[0] = postfix[i]; 
                    top++;
                    stack[top]=atof(temp);
                     
                } 
                break; 
        } 
        i++; 
    } 
} 

double cal(double p1, char op, double p2) //計算 
{ 
    switch(op) 
    { 
        case '+': 
            return p1 + p2; 
        case '-': 
            return p1 - p2; 
        case '*': 
            return p1 * p2; 
        case '/': 
            return p1 / p2; 
    } 
} 